// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FoxBeTestA.Integration.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Price List")]
    public partial class PriceListFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "PriceList.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Price List", "CRUD Operations for Price List entity", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get All Price List")]
        [NUnit.Framework.CategoryAttribute("PriceList")]
        public void GetAllPriceList()
        {
            string[] tagsOfScenario = new string[] {
                    "PriceList"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All Price List", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BaseRoomPrice"});
                table11.AddRow(new string[] {
                            "Hotel 1",
                            "50"});
#line 7
 testRunner.Given("the Accomodation entity for PriceList", ((string)(null)), table11, "Given ");
#line hidden
#line 10
 testRunner.And("the POST Accomodation http request to \'api/accomodation\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "AccomodationId",
                            "ExtraPercentageFromBasePrice"});
                table12.AddRow(new string[] {
                            "Single",
                            "{AccomodationId}",
                            "0"});
                table12.AddRow(new string[] {
                            "Double",
                            "{AccomodationId}",
                            "50"});
                table12.AddRow(new string[] {
                            "Deluxe",
                            "{AccomodationId}",
                            "70"});
                table12.AddRow(new string[] {
                            "Suite",
                            "{AccomodationId}",
                            "100"});
#line 11
 testRunner.And("the Room Type entities for PriceList", ((string)(null)), table12, "And ");
#line hidden
#line 17
 testRunner.And("the POST http request to \'api/roomtype\' for all RoomType entities for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "RoomTypeId",
                            "Price"});
                table13.AddRow(new string[] {
                            "2022-12-27",
                            "{RoomTypeId1}",
                            "0"});
                table13.AddRow(new string[] {
                            "2022-12-27",
                            "{RoomTypeId2}",
                            "0"});
                table13.AddRow(new string[] {
                            "2022-12-27",
                            "{RoomTypeId3}",
                            "0"});
                table13.AddRow(new string[] {
                            "2022-12-27",
                            "{RoomTypeId4}",
                            "0"});
#line 18
 testRunner.And("And the PriceList entities", ((string)(null)), table13, "And ");
#line hidden
#line 24
 testRunner.And("the POST http request to \'api/pricelist\' for all PriceList entities for PriceList" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.When("perfom the GET http request to \'api/pricelist\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then("I should recieve 4 json nodes for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "RoomTypeId",
                            "Price"});
                table14.AddRow(new string[] {
                            "2022-12-27T00:00:00",
                            "{RoomTypeId1}",
                            "50.0"});
                table14.AddRow(new string[] {
                            "2022-12-27T00:00:00",
                            "{RoomTypeId2}",
                            "75.0"});
                table14.AddRow(new string[] {
                            "2022-12-27T00:00:00",
                            "{RoomTypeId3}",
                            "85.0"});
                table14.AddRow(new string[] {
                            "2022-12-27T00:00:00",
                            "{RoomTypeId4}",
                            "100.0"});
#line 27
 testRunner.And("response nodes should be equal to PriceList", ((string)(null)), table14, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Price List")]
        [NUnit.Framework.CategoryAttribute("PriceList")]
        public void GetPriceList()
        {
            string[] tagsOfScenario = new string[] {
                    "PriceList"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Price List", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BaseRoomPrice"});
                table15.AddRow(new string[] {
                            "Hotel 1",
                            "50"});
#line 36
 testRunner.Given("the Accomodation entity for PriceList", ((string)(null)), table15, "Given ");
#line hidden
#line 39
 testRunner.And("the POST Accomodation http request to \'api/accomodation\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "AccomodationId",
                            "ExtraPercentageFromBasePrice"});
                table16.AddRow(new string[] {
                            "Single",
                            "{AccomodationId}",
                            "0"});
#line 40
 testRunner.And("the RoomType entity for PriceList", ((string)(null)), table16, "And ");
#line hidden
#line 43
 testRunner.And("the POST http request Room Type to \'api/roomtype\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "RoomTypeId",
                            "Price"});
                table17.AddRow(new string[] {
                            "2022-12-27",
                            "{RoomTypeId}",
                            "0"});
#line 44
 testRunner.And("And the PriceList entity", ((string)(null)), table17, "And ");
#line hidden
#line 47
 testRunner.And("the POST http request to \'api/pricelist\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.When("perfom the GET http request to \'api/pricelist/{id}\' with the inserted id for Pric" +
                        "eList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "RoomTypeId",
                            "Price"});
                table18.AddRow(new string[] {
                            "2022-12-27T00:00:00",
                            "{RoomTypeId}",
                            "50.0"});
#line 49
 testRunner.Then("response node should be equal to PriceList", ((string)(null)), table18, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert Price List")]
        [NUnit.Framework.CategoryAttribute("PriceList")]
        public void InsertPriceList()
        {
            string[] tagsOfScenario = new string[] {
                    "PriceList"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert Price List", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BaseRoomPrice"});
                table19.AddRow(new string[] {
                            "Hotel 1",
                            "50"});
#line 55
    testRunner.Given("the Accomodation entity for PriceList", ((string)(null)), table19, "Given ");
#line hidden
#line 58
 testRunner.And("the POST Accomodation http request to \'api/accomodation\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "AccomodationId",
                            "ExtraPercentageFromBasePrice"});
                table20.AddRow(new string[] {
                            "Single",
                            "{AccomodationId}",
                            "0"});
#line 59
 testRunner.And("the RoomType entity for PriceList", ((string)(null)), table20, "And ");
#line hidden
#line 62
 testRunner.And("the POST http request Room Type to \'api/roomtype\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "RoomTypeId",
                            "Price"});
                table21.AddRow(new string[] {
                            "2022-12-27",
                            "{RoomTypeId}",
                            "0"});
#line 63
 testRunner.And("And the PriceList entity", ((string)(null)), table21, "And ");
#line hidden
#line 66
 testRunner.And("the POST http request to \'api/pricelist\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.When("perfom the GET http request to \'api/pricelist\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
 testRunner.Then("I should recieve 1 json nodes for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "RoomTypeId",
                            "Price"});
                table22.AddRow(new string[] {
                            "2022-12-27T00:00:00",
                            "{RoomTypeId1}",
                            "50.0"});
#line 69
 testRunner.And("response nodes should be equal to PriceList", ((string)(null)), table22, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Price List")]
        [NUnit.Framework.CategoryAttribute("PriceList")]
        public void UpdatePriceList()
        {
            string[] tagsOfScenario = new string[] {
                    "PriceList"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Price List", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BaseRoomPrice"});
                table23.AddRow(new string[] {
                            "Hotel 1",
                            "50"});
#line 75
 testRunner.Given("the Accomodation entity for PriceList", ((string)(null)), table23, "Given ");
#line hidden
#line 78
 testRunner.And("the POST Accomodation http request to \'api/accomodation\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "AccomodationId",
                            "ExtraPercentageFromBasePrice"});
                table24.AddRow(new string[] {
                            "Single",
                            "{AccomodationId}",
                            "0"});
#line 79
 testRunner.And("the RoomType entity for PriceList", ((string)(null)), table24, "And ");
#line hidden
#line 82
 testRunner.And("the POST http request Room Type to \'api/roomtype\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "RoomTypeId",
                            "Price"});
                table25.AddRow(new string[] {
                            "2022-12-27",
                            "{RoomTypeId}",
                            "0"});
#line 83
 testRunner.And("And the PriceList entity", ((string)(null)), table25, "And ");
#line hidden
#line 86
 testRunner.And("the POST http request to \'api/pricelist\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "RoomTypeId",
                            "Price"});
                table26.AddRow(new string[] {
                            "2022-12-28",
                            "{RoomTypeId}",
                            "20"});
#line 87
 testRunner.And("the PUT http request to \'api/pricelist/{id}\' with the inserted id and the new ent" +
                        "ity PriceList", ((string)(null)), table26, "And ");
#line hidden
#line 90
 testRunner.When("perfom the GET http request to \'api/pricelist\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
 testRunner.Then("I should recieve 1 json nodes for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "RoomTypeId",
                            "Price"});
                table27.AddRow(new string[] {
                            "2022-12-28T00:00:00",
                            "{RoomTypeId1}",
                            "20.0"});
#line 92
 testRunner.And("response nodes should be equal to PriceList", ((string)(null)), table27, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete Price List")]
        [NUnit.Framework.CategoryAttribute("PriceList")]
        public void DeletePriceList()
        {
            string[] tagsOfScenario = new string[] {
                    "PriceList"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Price List", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BaseRoomPrice"});
                table28.AddRow(new string[] {
                            "Hotel 1",
                            "50"});
#line 98
 testRunner.Given("the Accomodation entity for PriceList", ((string)(null)), table28, "Given ");
#line hidden
#line 101
 testRunner.And("the POST Accomodation http request to \'api/accomodation\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "AccomodationId",
                            "ExtraPercentageFromBasePrice"});
                table29.AddRow(new string[] {
                            "Single",
                            "{AccomodationId}",
                            "0"});
#line 102
 testRunner.And("the RoomType entity for PriceList", ((string)(null)), table29, "And ");
#line hidden
#line 105
 testRunner.And("the POST http request Room Type to \'api/roomtype\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "RoomTypeId",
                            "Price"});
                table30.AddRow(new string[] {
                            "2022-12-27",
                            "{RoomTypeId}",
                            "0"});
#line 106
 testRunner.And("And the PriceList entity", ((string)(null)), table30, "And ");
#line hidden
#line 109
 testRunner.And("the POST http request to \'api/pricelist\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
 testRunner.And("the DELETE http request to \'api/pricelist/{id}\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.When("perfom the GET http request to \'api/pricelist\' for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 112
 testRunner.Then("I should recieve 0 json nodes for PriceList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
